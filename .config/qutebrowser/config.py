# Autogenerated config.py
#
# NOTE: config.py is intended for advanced users who are comfortable
# with manually migrating the config file on qutebrowser upgrades. If
# you prefer, you can also configure qutebrowser using the
# :set/:bind/:config-* commands without having to write a config.py
# file.
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Change the argument to True to still load settings configured via autoconfig.yml
config.load_autoconfig(False)

# Load redirectors.py script
config.source('pyconfig/redirectors.py')

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'chrome-devtools://*')

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'devtools://*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version} Edg/{upstream_browser_version}', 'https://accounts.google.com/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99 Safari/537.36', 'https://*.slack.com/*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'chrome-devtools://*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome-devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Enable clipboard
# Ref: https://teddit.net/r/qutebrowser/comments/brjljl/using_the_copy_to_clipboard_buttons_on_webpages/
config.set('content.javascript.can_access_clipboard', True)

# Make hint uppercase.
# Type: Bool
config.set('hints.uppercase', True)

# Change start pages
config.set('url.start_pages','/home/bruhtus/.config/qutebrowser/index.html')

# Change download directory
config.set('downloads.location.directory','/home/bruhtus/downloads/')

# Change tabs position and tabs padding
config.set('tabs.position', 'left')
# config.set('tabs.width', '8%')
c.tabs.padding = {'top': 0, 'bottom': 0, 'left': 0, 'right': 0}

# Do not display tab and statusbar at startup
# config.set('statusbar.show', 'never')
config.set('tabs.show', 'never')

# Show scrolling bar
# config.set('scrolling.bar', 'always')

# Ad-block
config.set('content.blocking.method', 'both')

# View pdf within qutebrowser
config.set('content.pdfjs', False)

# Show notification
# Per domain setting reference: https://qutebrowser.org/doc/help/configuring.html#_per_domain_settings
config.set('content.notifications.enabled', True)

# Ref: https://qutebrowser.org/doc/help/commands.html
# Bindings for normal mode
config.bind('J', 'tab-next')
config.bind('K', 'tab-prev')
config.bind('M', 'hint links spawn mpv --ytdl-format="bestvideo[ext=mp4][height<=?360]+bestaudio[ext=m4a]/best" {hint-url}')
config.bind('Q', 'set-cmd-text -s :session-load')
config.bind('ZX', 'set-cmd-text -s :session-save --only-active-window')
config.bind('ZQ', 'close')
# Note: the downside of this approach is that, we can only save and close one
# one session. if we have two session opened, this mapping will screw up our session.
# Ref: https://github.com/qutebrowser/qutebrowser/issues/572
# config.bind('ZZ', 'set-cmd-text session-save --only-active-window;; set-cmd-text --append close')
config.bind('ZZ', 'session-save --current --only-active-window;; close')
config.bind('zj', 'tab-move +')
config.bind('zk', 'tab-move -')
config.bind('d', 'scroll-page 0 0.5')
config.bind('u', 'scroll-page 0 -0.5')
config.bind('x', 'tab-close')
config.bind('X', 'undo')
config.bind('yf', 'hint links yank')
config.bind('cn', 'hint inputs')
config.bind('cw', 'set-cmd-text :open {url:pretty}')
config.bind('cW', 'set-cmd-text :open -t -r {url:pretty}')
config.bind('cb', 'set-cmd-text -s :open -b')
config.bind('cB', 'set-cmd-text :open -b -r {url:pretty}')
# config.bind('za', 'config-cycle statusbar.show never always;; config-cycle tabs.show never always')
config.bind('<Space>', 'config-cycle tabs.show never always')
config.bind('<Shift-Tab>', 'tab-focus')
config.bind('<Ctrl-=>', 'zoom-in')
config.bind('<Ctrl-->', 'zoom-out')
config.bind('<Ctrl-0>', 'zoom')

# Unbind default bindings
config.unbind('xo')
config.unbind('go')
config.unbind('gO')
config.unbind('xo')
config.unbind('xO')

# Bindings for insert mode
config.bind("<Ctrl-h>", "fake-key <Backspace>", "insert")
config.bind("<Ctrl-m>", "fake-key <Enter>", "insert")
config.bind("<Ctrl-i>", "fake-key <Tab>", "insert")
# config.bind("<Ctrl-c>", "fake-key <Ctrl-[>", "insert")
config.bind("<Ctrl-a>", "fake-key <Home>", "insert")
config.bind("<Ctrl-e>", "fake-key <End>", "insert")
config.bind("<Ctrl-b>", "fake-key <Left>", "insert")
config.bind("<Mod1-b>", "fake-key <Ctrl-Left>", "insert")
config.bind("<Ctrl-f>", "fake-key <Right>", "insert")
config.bind("<Mod1-f>", "fake-key <Ctrl-Right>", "insert")
config.bind("<Ctrl-p>", "fake-key <Up>", "insert")
config.bind("<Ctrl-n>", "fake-key <Down>", "insert")
config.bind("<Mod1-d>", "fake-key <Ctrl-Delete>", "insert")
config.bind("<Ctrl-d>", "fake-key <Delete>", "insert")
config.bind("<Ctrl-w>", "fake-key <Ctrl-Backspace>", "insert")
config.bind("<Ctrl-u>", "fake-key <Shift-Home><Delete>", "insert")
config.bind("<Ctrl-k>", "fake-key <Shift-End><Delete>", "insert")

c.fonts.default_family = []
c.fonts.default_size = '11pt'
c.fonts.hints = 'default_size default_family'

c.completion.height = '20%'

c.colors.hints.bg = 'black'
c.colors.hints.fg = 'white'
c.colors.hints.match.fg = 'lightgreen'

c.url.default_page = 'https://searx.be/'
c.url.searchengines = {'DEFAULT': 'https://searx.be/search?q={}'}
