#git alias
# ref: https://stackoverflow.com/a/12538667
alias \
	g='git' \
	gd='git diff -p --numstat' \
	gmv='git mv' \
	gcl='git clone' \
	gss='git status -sb' \
	gref='git reflog'

# ref: https://stackoverflow.com/a/30050792 (xargs -a)
alias \
	ga='git add' \
	gcf='git status -s | awk "/^[^??]/ {print \$2}" | fzf --multi | xargs -r git checkout'
	# gap='xargs -a <(git status -s | awk "{print \$2}") git add -p'

# ref: https://github.com/junegunn/fzf/issues/2887#issuecomment-1199258039 (fzf reload example)
# note: only able to parse filename without spacing.
gaf() {
	local diff='
	[ {1} != "??" ] &&
		{ git diff --color=always -- {2} | less -R --incsearch } ||
			{ git diff --color=always --no-index -- /dev/null {2} | less -R --incsearch }
	'

	local git_config='git -c color.status=always'

	FZF_DEFAULT_COMMAND="$git_config status -s" \
		fzf \
		--ansi \
		--bind 'ctrl-i:reload(git add -- {2} && eval "$FZF_DEFAULT_COMMAND")' \
		--bind 'ctrl-s:execute(git add -p -- {2})+reload(eval "$FZF_DEFAULT_COMMAND")' \
		--bind 'ctrl-d:reload(git reset -- {2} >/dev/null && eval "$FZF_DEFAULT_COMMAND")' \
		--bind 'ctrl-g:reload(git reset >/dev/null && eval "$FZF_DEFAULT_COMMAND")' \
		--bind 'ctrl-r:reload(eval "$FZF_DEFAULT_COMMAND")' \
		--bind "ctrl-x:reload($git_config status -su -- {2})" \
		--bind "enter:execute($diff)"
}

gcff() {
	git diff --name-only HEAD $1 | \
		fzf --ansi --multi --height=80% --reverse --preview="git diff --color=always HEAD $1 -- {1}" --preview-window=nohidden | \
		xargs -r git restore -s $1
}

alias \
	gc='git commit' \
	gca='git commit --amend'

alias \
	gp='git push' \
	gpd='git push --dry-run' \
	ggp='git push -u origin "$(git branch --show-current)"' \
	ggpd='git push origin -d "$(git branch --show-current)"'

alias \
	gb='git branch' \
	gbd='git branch | awk "/^[^*+]/ {print \$1}" | fzf --multi | xargs -r git branch -D' \
	gbm='git branch -m'

# ref: https://unix.stackexchange.com/questions/141285/using-xargs-with-git
# ref: https://unix.stackexchange.com/a/174717
alias \
	gch='git checkout' \
	gco='git branch | awk "/^[^*+]/ {print \$1}" | fzf | xargs -r git checkout' \
	gcb='git checkout -b' \
	gct='git branch -r | fzf | xargs -r git checkout -t'


# ref:
# check current branch upstream: https://stackoverflow.com/a/9753364
# local variable exit code: https://superuser.com/a/1103711
# options using while: https://stackoverflow.com/a/22395652
# options using getopts: https://archive.is/TRzn4
# shift command: https://www.geeksforgeeks.org/shift-command-in-linux-with-examples/
# TODO:
# add option -r for input remote.
ggl() {
	git rev-parse --is-inside-work-tree >/dev/null || return 1

	# initial value, will get replaced on certain condition.
	local option
	local remote_name=origin
	local remote_branch_name
	remote_branch_name="$(git branch --show-current)" || return "$?"

	# manually handle options that aren't listed:
	# https://stackoverflow.com/a/31221377
	while getopts :b:r:h option; do
		case "$option" in
			b)
				[ ! -z "${OPTARG#-[brh]}" ] &&
				{
					git check-ref-format --branch "$OPTARG" >/dev/null &&
						remote_branch_name="$OPTARG" ||
						return "$?"
				} || {
					echo "Can not use option '$OPTARG' as argument" && return 1
				}
				;;
			r)
				echo "$option remote $OPTARG"
				;;
			h)
				echo "Usage: $0 [-b <branch-name>] [-r <remote-name>]"
				return
				;;
			*)
				echo "$0: '-$OPTARG' is not a valid option. Use '-h' for available options."
				return 1
				;;
		esac
	done

	if [ -z "$option" ]; then
		local local_upstream_branch
		local_upstream_branch="$(git for-each-ref --format='%(upstream:short)' --count=1 --omit-empty "$(git symbolic-ref -q HEAD)")" || return "$?"

		[ -z "$local_upstream_branch" ] && echo 'No upstream reference' && return 1
		remote_name="${local_upstream_branch%%/*}" # something like `origin`
		remote_branch_name="${local_upstream_branch#*/}"
	fi

	local git_ls_remote
	# `timeout` command is from GNU coreutils.
	git_ls_remote="$(timeout --preserve-status 5s git ls-remote --head "$remote_name" "$remote_branch_name")" || return $?

	[ ! -z "$git_ls_remote" ] && \
	{
		echo "Pulling from branch "$remote_branch_name" on remote "$remote_name"" && \
			git pull "$remote_name" "$remote_branch_name"
	} || {
		printf "No branch "$remote_branch_name" on remote "$remote_name"\nUnset upstream reference\n" && \
			git branch --unset-upstream
	}
}

# ref: https://github.com/wfxr/forgit/blob/b727321f2bd3d79c1dae805441261c45888cbb41/forgit.plugin.zsh#L17-L34
# ref: https://stackoverflow.com/a/1441062
# note:
# if we use `ctrl-c`, the exit code will be 130, not 0.
# ref: https://stackoverflow.com/a/8977668 (about shell piping).
# ref: https://unix.stackexchange.com/a/14276 (pipestatus in zsh and bash).
# ref: https://www.rapidtables.com/code/text/ascii-table.html (hex number).
gl() {
	git rev-parse --is-inside-work-tree >/dev/null || return 1

	local cmd='git show --color=always --format=medium --numstat -p {1}'

	FZF_DEFAULT_COMMAND='git log --color=always --date=short --format="%C(auto)%h%x20%ad%x20%x20%s%d"' \
		fzf \
		--ansi \
		+m \
		--height=80% \
		--tiebreak=index \
		--reverse \
		--bind "enter:execute($cmd | less -R --incsearch)" \
		--bind 'ctrl-r:reload(eval "$FZF_DEFAULT_COMMAND")' \
		--bind "ctrl-y:execute-silent(echo {1} | tr -d '[:space:]' | xsel --clipboard --input)" \
		--preview='git show --color=always --numstat --format="%C(auto)%D%n%s" {1}' \
		--preview-window=up,nohidden,20%
}

alias \
	glo='git log --graph --oneline' \
	glg='git log -g' \
	glp='git log -p' \
	gld='git log --graph --oneline --decorate $(git fsck --no-reflog | awk "/dangling commit/ {print \$3}")'

alias \
	gm='git merge' \
	gmt='git mergetool'

alias \
	grm='git rm' \
	grmc='git rm --cached'

# Ref:
# https://unix.stackexchange.com/a/305192 (remove trailing character with awk)
# https://stackoverflow.com/a/12681856 (show git stash untracked file)
# https://stackoverflow.com/a/1105666 (checkout stash)
# https://stackoverflow.com/a/3801554 (list untracked file)
alias \
	gurm='git ls-files --others --exclude-standard | fzf --multi | xargs -r rm -v'

alias \
	gres='git reset'

alias \
	greb='git rebase'

alias \
	gf='git fetch' \
	gfp='git fetch --prune'

alias \
	gwl='git worktree list'

gwa() {
	local git_root=$(git rev-parse --show-toplevel)
	local git_branch=$(git branch -a | awk '/^[^*+]/ {print $1}' | fzf )
	[ ! -z "$git_branch" ] && git worktree add $git_root/.worktree/$git_branch $git_branch || return 0
}

# ref: https://stackoverflow.com/a/47698869 (using awk in shell alias)
alias \
	gwr='git worktree list | fzf | awk "{print \$1}" | xargs -r git worktree remove'

alias \
	gra='git remote add' \
	gru='git remote update' \
	grs='git remote set-url' \
	grv='git remote -v'

alias \
	gst='git stash' \
	gstu='git stash -u' \
	gstp='git stash pop' \
	gstf='git status -su | awk "!/^M/ {print \$2}" | fzf --multi | xargs -r git stash push -u'
	# gstl='git stash list'

# Ref: https://stackoverflow.com/a/66831429
gstl() {
	git rev-parse --is-inside-work-tree >/dev/null || return 1

	local cmd='git stash show -u --color=always --format=medium --numstat -p {1}'

	FZF_DEFAULT_COMMAND='git stash list --color=always --oneline' \
		fzf \
		--ansi \
		+m \
		--height=20% \
		--tiebreak=index \
		--reverse \
		--preview='git stash show -u --color=always --numstat {1}' \
		--preview-window=up,nohidden \
		--bind "enter:execute($cmd | less -R --incsearch)" \
		--bind 'ctrl-r:reload(eval "$FZF_DEFAULT_COMMAND")' \
		--bind "ctrl-y:execute-silent(echo {2} | tr -d '[:space:]\:' | xsel --clipboard --input)"
}

alias \
	gcd='cd "$(git rev-parse --show-toplevel)"'

# ref:
# https://twitter.com/diawanchris/status/1531806319014838273
# (default branch of remote repo)
alias \
	gzot='git pull origin main'

# vim:ft=sh
