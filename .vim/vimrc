" Ref:
" https://github.com/tpope/dotfiles/blob/c31d6515e126ce2e52dbb11a7b01f4ac4cc2bd0c/.vimrc#L33-L36
if $VIMBARE
  set noloadplugins
  set viminfofile=NONE
  finish
endif

let mapleader = ' '

if !has('packages') | echom 'Please install vim-plug instead' | finish | endif

let $MYPACK =
      \ filereadable(expand('~/.vim/after/autoload/pack.vim')) ?
      \ expand('~/.vim/after/autoload/pack.vim') :
      \ has('nvim-0.3.1') ?
      \ stdpath('config') . '/after/autoload/pack.vim' :
      \ expand('~/.config/nvim/after/autoload/pack.vim')

command! PacClean source $MYPACK | call pack#init() | call minpac#clean()
command! PacSync  source $MYPACK | call pack#init() | call minpac#update()
command! PacMove  source $MYPACK | call pack#init() | call pack#move()

command! PacList
      \ if !exists('g:loaded_minpac') | packadd minpac | endif           |
      \ echo 'Total: '
      \ . len(minpac#getpackages('minpac', '', '', 1)) . ' plugin(s)'    |
      \ echo join(sort(minpac#getpackages('minpac', '', '', 1)), "\n")

" Usage: PacQ start or PacQ opt
" Ref: https://dev.to/dlains/create-your-own-vim-commands-415b
" command! -nargs=1 PacQ
"       \ if !exists('g:loaded_minpac') | packadd minpac | endif |
"       \ exe "echo 'Total:'"
"       \ . "len(minpac#getpackages('minpac', '"
"       \ . <f-args> . "', '', 1)) . ' plugin(s)'"               |
"       \ exe "echo join(sort(minpac#getpackages('minpac', '"
"       \ . <f-args> . "', '', 1)), " . '"\n")'

command! PacInstall
      \ source $MYPACK   |
      \ call pack#init() |
      \ call minpac#update(
      \ keys(filter(copy(minpac#pluglist), {-> !isdirectory(v:val.dir . '/.git')}))
      \ )

" Ref: https://learnvimscriptthehardway.stevelosh.com/chapters/42.html

if exists(':packadd') != 2 || $VIMNOPACK
  finish
endif

packadd! vim-surround
packadd! targets.vim
packadd! traces.vim

if expand('%') !~# '\v(psql.edit.*.sql|zsh\w*.zsh|COMMIT_EDITMSG)'
  packadd! vim-dbml
  packadd! vim-bufstop
  packadd! vim-commentary
  packadd! vim-projectionist
endif

function! IDE() abort
  if exists('g:ide_loaded') | return | endif

  " Note: lsp startup config.
  " let g:lsp_auto_enable = 0
  let g:lsp_settings_enable_suggestions = 0
  let g:lsp_diagnostics_echo_cursor = 1
  let g:lsp_diagnostics_echo_delay = 1
  let g:lsp_signature_help_enabled = 0
  let g:lsp_document_highlight_enabled = 0
  let g:lsp_diagnostics_virtual_text_enabled = 0
  let g:lsp_fold_enabled = 0
  let g:lsp_float_max_width = winwidth(0)
  " let g:lsp_diagnostics_float_cursor = 1

  " Note: neoformat startup config
  let g:neoformat_try_node_exe = 1
  " let g:neoformat_run_all_formatters = 1
  let g:neoformat_enabled_javascript = ['prettier']
  let g:neoformat_enabled_html = ['prettier']
  let g:neoformat_enabled_markdown = []

  augroup lsp_init
    autocmd!
    autocmd User lsp_buffer_enabled call vimlsp#init()
    autocmd BufWritePre *
          \ if !exists('g:no_formatter') && exists(':Neoformat') |
          \   silent Neoformat |
          \ endif
  augroup END

  packadd vim-lsp
  packadd vim-lsp-settings
  packadd neoformat

  if exists('*lsp_settings#utils#group_name')
    if exists('#' . lsp_settings#utils#group_name(&ft) . '#FileType#' . &ft)
      exe 'doautocmd <nomodeline>' lsp_settings#utils#group_name(&ft) 'FileType' &ft
    endif
  endif

  call lsp#enable()

  let g:ide_loaded = 1
endfunction

let g:lsp_filetype = [
      \   'typescript',
      \   'typescriptreact',
      \   'javascript',
      \   'dart',
      \   'terraform',
      \ ]

augroup lazy_load_package
  autocmd!

  " TODO:
  " manually remove autocmd instead of using ++once for backward compatibility.
  exe 'autocmd FileType \v(' . join(g:lsp_filetype, '|') . ') ++once'
        \ . ' call IDE()'
augroup END
